#!/usr/bin/python
"""
OpenSQL Pro
A powerfully simple database client
"""
import sys
import threading
import gi

import pymysql.cursors
import pymysql

from opensql import config, dbhelper, uihelper

gi.require_version('Gtk', '3.0')
gi.require_version('GtkSource', '3.0')
from gi.repository import Gio, Gtk, GLib, Gdk, GtkSource, GObject, Pango

if Gtk.get_major_version() < 3 or Gtk.get_minor_version() < 18:
    sys.exit('Gtk 3.18 or higher is required')

class AppWindow(Gtk.ApplicationWindow):
    """Main application window"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # Restore window state
        width = config.get_config('window_width', 800)
        height = config.get_config('window_height', 600)
        self.set_default_size(int(width), int(height))
        if config.get_config('window_state') == Gdk.WindowState.MAXIMIZED:
            self.state = Gdk.WindowState.MAXIMIZED
            self.maximize()
        elif config.get_config('window_state') == Gdk.WindowState.FULLSCREEN:
            self.state = Gdk.WindowState.FULLSCREEN
            self.fullscreen()
        else:
            self.state = None

        self.builder = Gtk.Builder()
        GObject.type_register(GtkSource.View)
        self.builder.add_from_file('ui/app-window.ui')
        self.builder.connect_signals(self)

        header_bar = self.builder.get_object('header_bar')
        self.set_titlebar(header_bar)

        self.notebook = self.builder.get_object('notebook')
        self.add_page()
        self.add(self.notebook)

        self.set_icon_name('office-database')
        self.show_all()

        self.connect('key_press_event', self.on_key_press)
        self.connect('delete-event', self.on_destroy)
        self.connect('size-allocate', self.on_size_allocate)
        self.connect('window-state-event', self.on_window_state_event)

    def on_key_press(self, widget, event, user_data=None):
        """Handle key press"""
        key = Gdk.keyval_name(event.keyval)
        if key == 'F5':
            self.update_table_list()
            return True
        if key == 'F9':
            self.run_editor_query()
            return True
        return False

    def add_page(self):
        """Add a new connection page"""
        builder = Gtk.Builder()
        builder.add_from_file('ui/app-tab.ui')
        builder.connect_signals(self)

        box = builder.get_object('tab_box')

        start_builder = Gtk.Builder()
        start_builder.add_from_file('ui/app-tab-start.ui')
        start_builder.connect_signals(self)

        box.add(start_builder.get_object('container'))

        connection_list = start_builder.get_object('connection_list')
        connections = config.get_connections()

        for row in connections:
            self.add_connection_btn(row, connection_list)

        conn_add_button = start_builder.get_object('btn_add_connection')
        connection_list.pack_end(conn_add_button, True, True, 0)

        tab = builder.get_object('tab')
        tab.builder = builder
        self.notebook.append_page(box, tab)

    def get_current_page(self):
        """Get the current notebook page"""
        page_id = self.notebook.get_current_page()
        if page_id is not None:
            page = self.notebook.get_nth_page(page_id)
            return page
        return None

    def on_add_tab_click(self, widget=None, *data):
        """Add a new connection tab on click"""
        self.add_page()

    def add_connection_btn(self, data, connection_list, show=False):
        """Add button for saved connection"""
        button = Gtk.Button(label=data[1])
        button.connect('clicked', self.btn_connect_saved, data[0])
        connection_list.pack_end(button, True, True, 0)
        if show:
            connection_list.show_all()

    def btn_connect_saved(self, button, data):
        """Connect to saved server on button click"""
        page = self.get_current_page()
        try:
            conndata = config.get_connection(data)
            page.db_bookmark_id = conndata[0]
            conn = pymysql.connect(host=conndata[2],
                                   user=conndata[4],
                                   password=conndata[5],
                                   charset='utf8mb4',
                                   cursorclass=pymysql.cursors.DictCursor)
            page.db_connection = conn

            # Initialize editor builder
            page.builder = Gtk.Builder()
            page.builder.add_from_file('ui/app-tab-editor.ui')
        except pymysql.err.Error as err:
            dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.ERROR,
                                       Gtk.ButtonsType.OK,
                                       'Error connecting to server')
            dialog.format_secondary_text(err.__str__())
            dialog.set_title('Connection Error')
            dialog.run()
            dialog.destroy()
            return

        # Set tab title and window subtitle
        tab = self.notebook.get_tab_label(page)
        tab_label = tab.builder.get_object('tab_label')
        tab_label.set_label(conndata[1])
        header_bar = self.builder.get_object('header_bar')
        header_bar.set_subtitle(conndata[4] + '@' + conndata[2])

        # Remove connection UI
        for child in page.get_children():
            child.destroy()

        # Update database list
        combo_db = self.builder.get_object('combo_db')
        cursor = page.db_connection.cursor()
        cursor.execute('SHOW DATABASES')
        db_result = cursor.fetchall()
        db_store = Gtk.ListStore(str)
        lastdb_index = None
        for i, row in enumerate(db_result):
            db_store.append(row.values())
            if conndata[6] and (list(row.values())[0] == conndata[6]):
                lastdb_index = i
        combo_db.set_model(db_store)
        combo_db.connect('changed', self.on_db_change)
        combo_db.set_sensitive(True)

        # Restore last used DB, if any
        if conndata[6] and lastdb_index is not None:
            combo_db.set_active(lastdb_index)

        # Add editor UI
        page.editor = page.builder.get_object('editor_source')
        buffer = page.editor.get_buffer()

        lang_manager = GtkSource.LanguageManager()
        lang = lang_manager.guess_language(None, 'application/sql')
        buffer.set_language(lang)

        conf_style = config.get_config('source-style')
        if conf_style:
            scheme_manager = GtkSource.StyleSchemeManager()
            scheme = scheme_manager.get_scheme(conf_style)
            buffer.set_style_scheme(scheme)

        container = page.builder.get_object('container')

        c_over = bool(int(config.get_config('overlay-scrollbars', False)))
        page.builder.get_object('table_scroll').set_overlay_scrolling(c_over)
        page.builder.get_object('editor_scroll').set_overlay_scrolling(c_over)
        page.builder.get_object('results_scroll').set_overlay_scrolling(c_over)
        page.builder.get_object('content_scroll').set_overlay_scrolling(c_over)

        page.add(container)
        container.show_all()

        # Bind run button
        btn_run = self.builder.get_object('btn_run')
        # TODO: disable run button when current tab is not connected
        btn_run.set_sensitive(True)
        btn_run.connect('clicked', self.btn_run)

    def get_db_connection(self):
        """Get the database connection from the current page"""
        page = self.get_current_page()
        if page:
            if hasattr(page, 'db_connection'):
                return page.db_connection
        return None

    def run_editor_query(self):
        """Run the query currently in the editor"""
        page = self.get_current_page()
        buffer = page.editor.get_buffer()
        sel_range = buffer.get_selection_bounds()
        if not sel_range:
            sel_range = (buffer.get_start_iter(), buffer.get_end_iter())
        query = buffer.get_text(*sel_range, False)

        results_scroll = page.builder.get_object('results_scroll')
        uihelper.add_spinner(results_scroll)

        def run_query(query, window):
            """Execute query and call show_result"""
            cursor = self.get_db_connection().cursor()
            try:
                cursor.execute(query)
            except pymysql.err.Error as err:
                GLib.idle_add(window.show_message, err)
            else:
                result = cursor.fetchall()
                GLib.idle_add(window.show_result, result, cursor.description)

        thread = threading.Thread(target=run_query, args=[query, self])
        thread.daemon = True
        thread.start()

    def show_result(self, result, meta):
        """Show a result set in a TreeView"""
        page = self.get_current_page()
        results_scroll = page.builder.get_object('results_scroll')
        if results_scroll.get_child():
            results_scroll.remove(results_scroll.get_child())

        results_tree = Gtk.TreeView(enable_grid_lines=True, enable_search=False)
        fontdesc = Pango.FontDescription("monospace 9")
        results_tree.modify_font(fontdesc)

        results_tree.get_selection().set_mode(Gtk.SelectionMode.BROWSE)

        result_list = dbhelper.result_to_liststore(result, meta, results_tree)
        results_tree.set_model(result_list)
        results_scroll.add(results_tree)
        results_scroll.show_all()

    def show_message(self, message):
        """Show message result from query"""
        page = self.get_current_page()
        results_scroll = page.builder.get_object('results_scroll')
        if results_scroll.get_child():
            results_scroll.remove(results_scroll.get_child())
        align = Gtk.Alignment()
        if isinstance(message, Exception):
            message = str(message)
        label = Gtk.Label(label=message, selectable=True, justify='center',
                          wrap=True)
        align.add(label)
        results_scroll.add(align)
        results_scroll.show_all()

    def btn_run(self, button):
        """Run query on button click"""
        self.run_editor_query()

    def on_db_change(self, combo):
        """Select database from combo box"""
        tree_iter = combo.get_active_iter()
        if tree_iter is None:
            return

        # Select new database
        model = combo.get_model()
        db_name = model[tree_iter][0]
        self.get_db_connection().select_db(db_name)
        page = self.get_current_page()
        if hasattr(page, 'db_bookmark_id'):
            bookmark_id = page.db_bookmark_id
            config.set_connection_lastdb(bookmark_id, db_name)

        self.update_table_list()

    def update_table_list(self):
        """Update the table/view list in the left pane"""
        if not self.get_db_connection():
            return

        page = self.get_current_page()

        if not hasattr(page, 'builder'):
            return

        table_scroll = page.builder.get_object('table_scroll')
        uihelper.add_spinner(table_scroll)

        def list_query():
            """Load table list"""
            cursor = self.get_db_connection().cursor()
            try:
                cursor.execute('SHOW TABLES')
            except pymysql.err.Error as err:
                dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.ERROR,
                                           Gtk.ButtonsType.OK,
                                           'Error loading table list')
                dialog.format_secondary_text(err.__str__())
                dialog.set_title('Connection Error')
                dialog.run()
                dialog.destroy()
                return
            else:
                tables = cursor.fetchall()
                GLib.idle_add(list_display, tables, cursor.description)

        def list_display(tables, meta):
            """Render table list"""
            table_tree = Gtk.TreeView(enable_search=True)
            fontdesc = Pango.FontDescription("monospace 9")
            table_tree.modify_font(fontdesc)

            control = Gtk.CellRendererText()
            column = Gtk.TreeViewColumn('Tables', control, text=0)
            table_tree.append_column(column)
            table_list = Gtk.ListStore(str)
            for row in tables:
                table_list.append(row.values())

            table_tree.set_model(table_list)
            table_tree.set_search_column(0)
            table_tree.get_selection().connect('changed', self.on_table_select)

            if table_scroll.get_child():
                table_scroll.remove(table_scroll.get_child())
            table_scroll.add(table_tree)
            table_scroll.show_all()

        thread = threading.Thread(target=list_query)
        thread.daemon = True
        thread.start()

    def on_table_select(self, selection):
        """Handle table selection"""
        model, treeiter = selection.get_selected()
        if treeiter != None:
            self.load_table_contents(model[treeiter][0])

    def load_table_contents(self, table_name):
        """Load and display table contents"""
        page = self.get_current_page()
        content_scroll = page.builder.get_object('content_scroll')
        uihelper.add_spinner(content_scroll)

        def content_query(table_name):
            """Run table content SELECT query"""
            # TODO: Allow variable row limit
            identifier = dbhelper.escape_identifier(table_name)
            query = 'SELECT * FROM %s LIMIT 300' % identifier
            cursor = self.get_db_connection().cursor()
            try:
                cursor.execute(query)
            except pymysql.err.Error as err:
                dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.ERROR,
                                           Gtk.ButtonsType.OK,
                                           'Error loading table contents')
                dialog.format_secondary_text(err.__str__())
                dialog.set_title('Connection Error')
                dialog.run()
                dialog.destroy()
                return
            else:
                result = cursor.fetchall()
                GLib.idle_add(content_display, result, cursor.description)

        def content_display(result, meta):
            """Render query result"""
            content_tree = Gtk.TreeView(enable_grid_lines=True,
                                        enable_search=False)
            fontdesc = Pango.FontDescription("monospace 9")
            content_tree.modify_font(fontdesc)

            content_tree.get_selection().set_mode(Gtk.SelectionMode.BROWSE)

            content_list = dbhelper.result_to_liststore(result, meta,
                                                        content_tree,
                                                        editable=True)
            content_tree.set_model(content_list)

            if content_scroll.get_child():
                content_scroll.remove(content_scroll.get_child())
            content_scroll.add(content_tree)
            content_scroll.show_all()

        thread = threading.Thread(target=content_query, args=[table_name])
        thread.daemon = True
        thread.start()

    def load_table_structure(self, table_name):
        """Show table structure info"""

        # Show basic structure
        # structure_scroll = self.builder.get_object('structure_scroll')
        # label = Gtk.Label(label='test', selectable=True, wrap=True)

        # Show index info
        # index_scroll = self.builder.get_object('structure_index_scroll')

    def btn_add_connection(self, button):
        """Show Add Connection modal on button click"""
        add_dialog = AddConnectionWindow(transient_for=self, modal=True,
                                         skip_taskbar_hint=True)
        add_dialog.present()

    def on_size_allocate(self, widget=None, *data):
        """Save window size to config"""
        if self.state is None:
            size = self.get_size()
            config.set_config('window_width', size.width)
            config.set_config('window_height', size.height)

    def on_window_state_event(self, widget, event):
        """Save window state to config"""
        if event.changed_mask & Gdk.WindowState.MAXIMIZED:
            maximized = event.new_window_state & Gdk.WindowState.MAXIMIZED
            if maximized:
                self.state = Gdk.WindowState.MAXIMIZED
                config.set_config('window_state', 'maximized')
            else:
                fullscreen = event.new_window_state & Gdk.WindowState.FULLSCREEN
                if fullscreen:
                    self.state = Gdk.WindowState.FULLSCREEN
                    config.set_config('window_state', 'fullscreen')
                else:
                    self.state = None
                    config.set_config('window_state', 'normal')
        if event.changed_mask & Gdk.WindowState.FULLSCREEN:
            fullscreen = event.new_window_state & Gdk.WindowState.FULLSCREEN
            if fullscreen:
                self.state = Gdk.WindowState.FULLSCREEN
                config.set_config('window_state', 'fullscreen')
            else:
                maximized = event.new_window_state & Gdk.WindowState.MAXIMIZED
                if maximized:
                    self.state = Gdk.WindowState.MAXIMIZED
                    config.set_config('window_state', 'maximized')
                else:
                    self.state = None
                    config.set_config('window_state', 'normal')

    def on_destroy(self, widget=None, *data):
        """Write config DB and close MySQL connections on quit"""
        config.commit()
        connection = self.get_db_connection()
        if connection:
            connection.close()

class Application(Gtk.Application):
    """Core application class"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, application_id='com.phpizza.opensqlpro',
                         **kwargs)

        self.window = None

    def do_startup(self):
        """'Initialize application"""
        Gtk.Application.do_startup(self)

        action = Gio.SimpleAction.new('about', None)
        action.connect('activate', self.on_about)
        self.add_action(action)

        action = Gio.SimpleAction.new('preferences', None)
        action.connect('activate', self.on_preferences)
        self.add_action(action)

        action = Gio.SimpleAction.new('shortcuts', None)
        action.connect('activate', self.on_shortcuts)
        self.add_action(action)

        action = Gio.SimpleAction.new('quit', None)
        action.connect('activate', self.on_quit)
        self.add_action(action)

        builder = Gtk.Builder()
        builder.add_from_file('ui/app-menu.ui')
        self.set_app_menu(builder.get_object('app-menu'))

    def do_activate(self):
        """Create/raise main window on activate"""
        if not self.window:
            # Windows are associated with the application
            # when the last one is closed the application shuts down
            self.window = AppWindow(application=self, title='OpenSQL Pro')

        self.window.present()

    def on_about(self, action, param):
        """Show About dialog"""
        about_dialog = Gtk.AboutDialog(transient_for=self.window, modal=True)
        about_dialog.set_program_name('OpenSQL Pro')
        about_dialog.set_version('0.0.1')
        about_dialog.set_copyright('© Alan Hardman')
        about_dialog.set_comments('A powerfully simple database client')
        about_dialog.set_website('https://git.phpizza.com/alan/opensql-pro')
        about_dialog.set_logo_icon_name('office-database')
        about_dialog.set_authors(['Alan Hardman'])
        about_dialog.connect('response', self.on_about_close)
        about_dialog.present()

    def on_about_close(self, dialog, response):
        """Close About dialog on button click"""
        dialog.destroy()

    def on_preferences(self, action, param):
        """Show Preferences dialog"""
        dialog = PreferencesWindow(transient_for=self.window, modal=True,
                                   skip_taskbar_hint=True)
        dialog.present()

    def on_shortcuts(self, action, param):
        """Show Shortcuts dialog"""
        builder = Gtk.Builder()
        builder.add_from_file('ui/shortcuts-window.ui')
        win = builder.get_object('shortcuts')

        win.set_transient_for(self.window)

        def on_key_press(widget, event, user_data=None):
            """Handle key press"""
            key = Gdk.keyval_name(event.keyval)
            if key == 'Escape':
                widget.close()
                return True
            return False

        win.connect('key_press_event', on_key_press)
        win.present()

    def on_quit(self, action, param):
        """Close main window, gracefully exiting"""
        self.window.close()


class AddConnectionWindow(Gtk.Window):
    """Add connection modal window"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.builder = Gtk.Builder()
        self.builder.add_from_file('ui/add-dialog.ui')
        self.builder.connect_signals(self)

        header_bar = self.builder.get_object('header_bar')
        self.set_titlebar(header_bar)

        input_grid = self.builder.get_object('input_grid')
        self.add(input_grid)

        self.connect('key_press_event', self.on_key_press)

    def on_key_press(self, widget, event, user_data=None):
        """Handle key press"""
        key = Gdk.keyval_name(event.keyval)
        if key == 'Escape':
            self.close()
            return True
        if key == 'Enter':
            self.save_connection()
            return True
        return False

    def save_connection(self):
        """Save connection and close window"""
        name = self.builder.get_object('text_name').get_text()
        host = self.builder.get_object('text_host').get_text()
        port = self.builder.get_object('text_port').get_text()
        user = self.builder.get_object('text_user').get_text()
        password = self.builder.get_object('text_pass').get_text()
        cid = config.add_connection(name, host, port, user, password)

        data = config.get_connection(cid)
        # TODO: use box_connect from current tab
        # app.window.add_connection_btn(data, True)

        self.close()

    def btn_cancel(self, button):
        """Cancel adding a connection from button click"""
        self.close()

    def btn_save(self, button):
        """Save new connection from button click"""
        self.save_connection()


class PreferencesWindow(Gtk.Window):
    """Preferences modal window"""

    def __init__(self, *args, **kwargs):
        super().__init__(default_width=360, default_height=420, *args, **kwargs)

        GObject.type_register(GtkSource.StyleSchemeChooserWidget)
        self.builder = Gtk.Builder()
        self.builder.add_from_file('ui/preferences-window.ui')
        self.builder.connect_signals(self)

        # Initialize control states
        conf_overlay = config.get_config('overlay-scrollbars', False)
        overlay_switch = self.builder.get_object('overlay_switch')
        overlay_switch.set_state(bool(int(conf_overlay)))

        conf_style = config.get_config('source-style')
        if conf_style:
            style_chooser = self.builder.get_object('style_chooser')
            scheme_manager = GtkSource.StyleSchemeManager()
            scheme = scheme_manager.get_scheme(conf_style)
            style_chooser.set_style_scheme(scheme)

        # Final UI initialization
        header_bar = self.builder.get_object('header_bar')
        self.set_titlebar(header_bar)

        stack = self.builder.get_object('stack')
        self.add(stack)

        self.connect('key_press_event', self.on_key_press)

    def on_key_press(self, widget, event, user_data=None):
        """Handle key press"""
        key = Gdk.keyval_name(event.keyval)
        if key == 'Escape':
            self.close()
            return True
        return False

    def overlay_switch(self, widget, event, user_data=None):
        """Handle overlay scrollbar switch toggle"""
        config.set_config('overlay-scrollbars', int(event))
        # TODO: update all instances of GtkSource
        # if app.window.connection_active:
        #     builder = app.window.builder
        #     builder.get_object('table_scroll').set_overlay_scrolling(event)
        #     builder.get_object('editor_scroll').set_overlay_scrolling(event)
        #     builder.get_object('results_scroll').set_overlay_scrolling(event)
        #     builder.get_object('content_scroll').set_overlay_scrolling(event)

    def style_chooser(self, widget, event, user_data=None):
        """Handle style chooser scheme selection"""
        style_name = widget.get_style_scheme().get_id()
        config.set_config('source-style', style_name)
        # TODO: update all instances of GtkSource
        # if app.window.connection_active:
        #     scheme_manager = GtkSource.StyleSchemeManager()
        #     scheme = scheme_manager.get_scheme(style_name)
        #     app.window.editor.get_buffer().set_style_scheme(scheme)


if __name__ == '__main__':
    config.init()
    app = Application()
    app.run()
